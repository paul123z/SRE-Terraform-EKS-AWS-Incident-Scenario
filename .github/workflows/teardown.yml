name: Teardown SRE Demo Infrastructure

on:
  workflow_dispatch:  # Manual trigger only

env:
  AWS_REGION: eu-central-1
  CLUSTER_NAME: sre-incident-demo-cluster
  ECR_REPOSITORY: sre-demo-app
  APP_NAME: sre-demo-app
  NAMESPACE: default
  TF_STATE_BUCKET: sre-incident-demo-terraform-state
  TF_STATE_KEY: terraform.tfstate
  TF_STATE_REGION: eu-central-1

jobs:
  teardown:
    runs-on: ubuntu-22.04  # Specific Ubuntu version for stability
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.0  # Pinned version
      with:
        submodules: false
        
    - name: Setup Python 3.11
      uses: actions/setup-python@v4.7.0  # Pinned version
      with:
        python-version: '3.11.9'  # Specific Python version
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip==23.3.2
        pip install awscli==1.32.69 boto3==1.34.69
        
    - name: Setup Node.js 18
      uses: actions/setup-node@v4.1.0  # Pinned version
      with:
        node-version: '18.19.0'  # Specific Node.js version
        
    - name: Install AWS CLI v2
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.15.42.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        aws --version
        
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/v1.28.8/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
        
    - name: Install Helm
      run: |
        curl https://get.helm.sh/helm-v3.13.3-linux-amd64.tar.gz | tar xz
        sudo mv linux-amd64/helm /usr/local/bin/
        helm version
        
    - name: Install Terraform
      run: |
        curl -fsSL https://releases.hashicorp.com/terraform/1.7.5/terraform_1.7.5_linux_amd64.zip -o terraform.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        terraform version
        
    - name: Install additional tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq=1.6-1ubuntu1 curl=7.68.0-1ubuntu2.18 wget=1.20.3-1ubuntu2 unzip=6.0-25ubuntu1.1 git=1:2.34.1-1ubuntu1.10
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2  # Pinned version
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Check for Terraform state in S3
      id: check-tf-state
      run: |
        echo "🔍 Checking for Terraform state in S3..."
        if aws s3 ls s3://${{ env.TF_STATE_BUCKET }}/${{ env.TF_STATE_KEY }} 2>/dev/null; then
          echo "📁 Found Terraform state in S3"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "📁 No Terraform state found in S3"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Download Terraform state from S3
      if: steps.check-tf-state.outputs.exists == 'true'
      run: |
        echo "⬇️  Downloading Terraform state from S3..."
        aws s3 cp s3://${{ env.TF_STATE_BUCKET }}/${{ env.TF_STATE_KEY }} terraform/terraform.tfstate
        echo "✅ Terraform state downloaded from S3"
        
    - name: Configure Terraform backend for S3
      if: steps.check-tf-state.outputs.exists == 'true'
      run: |
        echo "⚙️  Configuring Terraform backend for S3..."
        cd terraform
        
        # Create backend configuration file
        cat > backend.tf <<EOF
        terraform {
          backend "s3" {
            bucket = "${{ env.TF_STATE_BUCKET }}"
            key    = "${{ env.TF_STATE_KEY }}"
            region = "${{ env.TF_STATE_REGION }}"
          }
        }
        EOF
        
        # Initialize Terraform with S3 backend
        terraform init -reconfigure
        echo "✅ Terraform backend configured for S3"
        
    - name: Teardown infrastructure with Terraform
      if: steps.check-tf-state.outputs.exists == 'true'
      run: |
        echo "🗑️  Starting infrastructure teardown with Terraform..."
        cd terraform
        
        # Plan the destruction
        terraform plan -destroy -out=tfplan-destroy
        
        # Apply the destruction plan
        terraform apply -auto-approve tfplan-destroy
        
        echo "✅ Infrastructure teardown completed with Terraform"
        
    - name: Fallback teardown (if no Terraform state)
      if: steps.check-tf-state.outputs.exists == 'false'
      run: |
        echo "⚠️  No Terraform state found, using fallback teardown..."
        echo "🗑️  Starting fallback infrastructure teardown..."
        ./scripts/teardown.sh
        
    - name: Clean up Terraform state from S3
      if: steps.check-tf-state.outputs.exists == 'true'
      run: |
        echo "🧹 Cleaning up Terraform state from S3..."
        aws s3 rm s3://${{ env.TF_STATE_BUCKET }}/${{ env.TF_STATE_KEY }}
        echo "✅ Terraform state removed from S3"
        
    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh
        
    - name: Show teardown summary
      run: |
        echo "✅ Teardown completed!"
        echo ""
        if [ "${{ steps.check-tf-state.outputs.exists }}" == "true" ]; then
          echo "🗑️  Resources removed via Terraform:"
          echo "- EKS Cluster: ${{ env.CLUSTER_NAME }}"
          echo "- ECR Repository: ${{ env.ECR_REPOSITORY }}"
          echo "- Application: ${{ env.APP_NAME }}"
          echo "- Monitoring stack"
          echo "- All associated AWS resources"
          echo "- Terraform state cleaned from S3"
        else
          echo "🗑️  Resources removed via fallback script:"
          echo "- EKS Cluster: ${{ env.CLUSTER_NAME }}"
          echo "- ECR Repository: ${{ env.ECR_REPOSITORY }}"
          echo "- Application: ${{ env.APP_NAME }}"
          echo "- Monitoring stack"
          echo "- All associated AWS resources"
        fi
        echo ""
        echo "⚠️  Note: Some resources may take a few minutes to fully terminate"
