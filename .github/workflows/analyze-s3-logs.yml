name: Analyze S3 Logs with Bedrock

on:
  workflow_dispatch:
    inputs:
      s3_object_url:
        description: 'S3 Object URL (e.g., https://bucket.s3.region.amazonaws.com/path/to/log.log)'
        required: true
        type: string
      incident_type:
        description: 'Type of incident to analyze'
        required: false
        default: 'memory_leak'
        type: choice
        options:
          - memory_leak
          - cpu_spike
          - network_issue
          - pod_crash
          - general

jobs:
  analyze-logs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1  # Bedrock region
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl unzip
        
    - name: Install AWS CLI v2
      run: |
        # Check if AWS CLI is already installed
        if command -v aws &> /dev/null; then
          echo "AWS CLI is already installed:"
          aws --version
        else
          echo "Installing AWS CLI v2..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
        fi
        
    - name: Verify AWS CLI and Bedrock access
      run: |
        echo "Testing AWS CLI installation..."
        aws --version
        
        echo "Testing Bedrock access..."
        aws bedrock list-foundation-models --region us-west-1 --query 'modelSummaries[?providerName==`Anthropic`]' --output table
        
    - name: Extract S3 bucket and key from URL
      id: s3-info
      run: |
        # Parse S3 URL to extract bucket and key
        S3_URL="${{ github.event.inputs.s3_object_url }}"
        
        # Handle different URL formats
        if [[ "$S3_URL" == s3://* ]]; then
          # s3://bucket/key format
          BUCKET=$(echo "$S3_URL" | sed 's|s3://||' | cut -d'/' -f1)
          KEY=$(echo "$S3_URL" | sed 's|s3://[^/]*/||')
        elif [[ "$S3_URL" == https://*.s3.*.amazonaws.com/* ]]; then
          # https://bucket.s3.region.amazonaws.com/key format
          BUCKET=$(echo "$S3_URL" | sed 's|https://||' | cut -d'.' -f1)
          KEY=$(echo "$S3_URL" | sed 's|https://[^/]*/||')
        else
          echo "Error: Invalid S3 URL format. Please use s3://bucket/key or https://bucket.s3.region.amazonaws.com/key"
          exit 1
        fi
        
        echo "Extracted bucket: $BUCKET"
        echo "Extracted key: $KEY"
        
        # Set outputs for next steps
        echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
        echo "key=$KEY" >> $GITHUB_OUTPUT
        
    - name: Download log file from S3
      run: |
        echo "Downloading log file from S3..."
        aws s3 cp "s3://${{ steps.s3-info.outputs.bucket }}/${{ steps.s3-info.outputs.key }}" ./incident-log.log
        
        echo "Log file size: $(wc -c < incident-log.log) bytes"
        echo "Log file preview (first 500 characters):"
        head -c 500 incident-log.log
        
    - name: Create analysis script
      run: |
        cat > analyze-log.sh << 'EOF'
        #!/bin/bash
        
        # Colors for output
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        PURPLE='\033[0;35m'
        NC='\033[0m' # No Color
        
        print_status() {
            echo -e "${BLUE}[INFO]${NC} $1"
        }
        
        print_success() {
            echo -e "${GREEN}[SUCCESS]${NC} $1"
        }
        
        print_warning() {
            echo -e "${YELLOW}[WARNING]${NC} $1"
        }
        
        print_error() {
            echo -e "${RED}[ERROR]${NC} $1"
        }
        
        print_header() {
            echo -e "${PURPLE}$1${NC}"
        }
        
        # Configuration
        AWS_REGION="us-west-1"
        BEDROCK_MODEL="us.anthropic.claude-sonnet-4-20250514-v1:0"
        LOG_FILE="./incident-log.log"
        INCIDENT_TYPE="${{ github.event.inputs.incident_type }}"
        
        print_header "ðŸ¤– AI-POWERED INCIDENT ANALYSIS"
        echo ""
        print_status "Analyzing log file: $LOG_FILE"
        print_status "Incident type: $INCIDENT_TYPE"
        print_status "Bedrock model: $BEDROCK_MODEL"
        print_status "AWS region: $AWS_REGION"
        echo ""
        
        # Check if log file exists
        if [ ! -f "$LOG_FILE" ]; then
            print_error "Log file not found: $LOG_FILE"
            exit 1
        fi
        
        # Read log content
        LOGS_CONTENT=$(cat "$LOG_FILE")
        LOG_SIZE=$(echo "$LOGS_CONTENT" | wc -c)
        
        print_status "Log content loaded (size: $LOG_SIZE characters)"
        
                 # Create analysis prompt
         ANALYSIS_PROMPT="You are an expert SRE (Site Reliability Engineer) analyzing a Kubernetes incident. Please analyze the following incident log data and provide a comprehensive incident analysis report. Please provide your analysis in JSON format with incident_summary, root_cause_analysis, immediate_fixes, preventive_measures, lessons_learned, and recommendations. Focus on identifying root causes, understanding timelines, analyzing resolution actions, and providing actionable recommendations. Be specific and actionable. INCIDENT LOG DATA: $LOGS_CONTENT"
        
        # Create Bedrock request payload
        BEDROCK_PAYLOAD="{\"anthropic_version\": \"bedrock-2023-05-31\", \"messages\": [{\"role\": \"user\", \"content\": \"$ANALYSIS_PROMPT\"}], \"temperature\": 0.3, \"max_tokens\": 2000}"
        
        print_status "Invoking AWS Bedrock for analysis..."
        
        # Call Bedrock
        if aws bedrock-runtime invoke-model \
          --region "$AWS_REGION" \
          --cli-binary-format raw-in-base64-out \
          --model-id "$BEDROCK_MODEL" \
          --content-type application/json \
          --accept application/json \
          --body "$BEDROCK_PAYLOAD" \
          bedrock-response.json; then
            
            print_success "Bedrock analysis completed successfully!"
            
            # Parse and display results
            RESPONSE_CONTENT=$(cat bedrock-response.json)
            
            if command -v jq &> /dev/null; then
                # Extract the analysis text
                ANALYSIS_TEXT=$(echo "$RESPONSE_CONTENT" | jq -r '.content[0].text // empty')
                
                if [ -n "$ANALYSIS_TEXT" ]; then
                    print_header "ðŸ“Š INCIDENT ANALYSIS RESULTS"
                    echo ""
                    
                    # Try to extract JSON from the response
                    JSON_START=$(echo "$ANALYSIS_TEXT" | grep -o '{.*}' | head -1)
                    
                    if [ -n "$JSON_START" ]; then
                        # Parse and display structured results
                        echo "$JSON_START" | jq -r '.analysis.incident_summary | "INCIDENT SUMMARY:"'
                        echo "$JSON_START" | jq -r '.analysis.incident_summary | "  Type: \(.type)"'
                        echo "$JSON_START" | jq -r '.analysis.incident_summary | "  Severity: \(.severity)"'
                        echo "$JSON_START" | jq -r '.analysis.incident_summary | "  Duration: \(.duration)"'
                        echo ""
                        
                        echo "$JSON_START" | jq -r '.analysis.root_cause_analysis | "ROOT CAUSE ANALYSIS:"'
                        echo "$JSON_START" | jq -r '.analysis.root_cause_analysis | "  Primary Cause: \(.primary_cause)"'
                        echo ""
                        
                        echo "$JSON_START" | jq -r '.analysis.immediate_fixes[]? | "IMMEDIATE FIX: \(.priority) - \(.action)"'
                        echo ""
                        
                        echo "$JSON_START" | jq -r '.analysis.recommendations[]? | "RECOMMENDATION (\(.category)): \(.recommendation) (Impact: \(.impact))"'
                        echo ""
                        
                        echo "$JSON_START" | jq -r '.analysis.lessons_learned[]? | "LESSON: \(.)"'
                        echo ""
                        
                        print_success "âœ… Analysis completed successfully!"
                    else
                        # Fallback to raw text
                        print_warning "Could not parse structured JSON, showing raw analysis:"
                        echo "$ANALYSIS_TEXT"
                    fi
                else
                    print_error "No analysis content found in response"
                    echo "Raw response: $RESPONSE_CONTENT"
                fi
            else
                # jq not available, show raw response
                print_warning "jq not available, showing raw analysis:"
                echo "$RESPONSE_CONTENT"
            fi
        else
            print_error "Bedrock analysis failed"
            exit 1
        fi
        EOF
        
        chmod +x analyze-log.sh
        
    - name: Run analysis
      run: |
        ./analyze-log.sh
        
    - name: Upload analysis results as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: analysis-results
        path: |
          bedrock-response.json
          incident-log.log
        retention-days: 7
