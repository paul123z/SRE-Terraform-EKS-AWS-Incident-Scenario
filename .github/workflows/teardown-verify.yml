name: Verify Teardown Completion

on:
  workflow_dispatch:  # Manual trigger only

env:
  AWS_REGION: eu-central-1
  CLUSTER_NAME: sre-incident-demo-cluster
  ECR_REPOSITORY: sre-demo-app
  VPC_NAME: sre-incident-demo-vpc
  TF_STATE_BUCKET: sre-incident-demo-terraform-state
  TF_STATE_KEY: terraform.tfstate
  TF_STATE_REGION: eu-central-1

jobs:
  verify:
    runs-on: ubuntu-22.04  # Specific Ubuntu version for stability
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.0  # Pinned version
      with:
        submodules: false
        
    - name: Setup Python 3.11
      uses: actions/setup-python@v4.7.0  # Pinned version
      with:
        python-version: '3.11.9'  # Specific Python version
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip==23.3.2
        pip install awscli==1.32.69 boto3==1.34.69
        
    - name: Install AWS CLI v2
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.15.42.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        aws --version
        
    - name: Install additional tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq=1.6-1ubuntu1 curl=7.68.0-1ubuntu2.18 wget=1.20.3-1ubuntu2 unzip=6.0-25ubuntu1.1 git=1:2.34.1-1ubuntu1.10
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2  # Pinned version
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Verify AWS resources cleanup
      run: |
        echo "🔍 Verifying AWS resources cleanup..."
        echo ""
        
        # Check for remaining EKS clusters
        echo "Checking for remaining EKS clusters..."
        clusters=$(aws eks list-clusters --region ${{ env.AWS_REGION }} --query 'clusters[?contains(@, `sre-incident-demo`)]' --output text)
        if [ -n "$clusters" ]; then
          echo "❌ Found remaining EKS clusters: [MASKED]"
          exit 1
        else
          echo "✅ No remaining EKS clusters found"
        fi
        
        # Check for remaining ECR repositories
        echo "Checking for remaining ECR repositories..."
        repos=$(aws ecr describe-repositories --region ${{ env.AWS_REGION }} --query 'repositories[?contains(repositoryName, `sre-incident-demo`)].repositoryName' --output text)
        if [ -n "$repos" ]; then
          echo "❌ Found remaining ECR repositories: [MASKED]"
          exit 1
        else
          echo "✅ No remaining ECR repositories found"
        fi
        
        # Check for remaining VPCs
        echo "Checking for remaining VPCs..."
        vpcs=$(aws ec2 describe-vpcs --region ${{ env.AWS_REGION }} --filters "Name=tag:Name,Values=${{ env.VPC_NAME }}" --query 'Vpcs[].VpcId' --output text)
        if [ -n "$vpcs" ]; then
          echo "❌ Found remaining VPCs: [MASKED]"
          exit 1
        else
          echo "✅ No remaining VPCs found"
        fi
        
        # Check for remaining Load Balancers
        echo "Checking for remaining Load Balancers..."
        lbs=$(aws elbv2 describe-load-balancers --region ${{ env.AWS_REGION }} --query 'LoadBalancers[?contains(LoadBalancerName, `sre-incident-demo`)].LoadBalancerName' --output text)
        if [ -n "$lbs" ]; then
          echo "❌ Found remaining Load Balancers: [MASKED]"
          exit 1
        else
          echo "✅ No remaining Load Balancers found"
        fi
        
        # Check for any remaining Terraform state in S3
        echo "Checking for remaining Terraform state in S3..."
        if aws s3 ls s3://${{ env.TF_STATE_BUCKET }}/${{ env.TF_STATE_KEY }} 2>/dev/null; then
          echo "❌ Found remaining Terraform state in S3"
          exit 1
        else
          echo "✅ No remaining Terraform state found in S3"
        fi
        
        # Check for any remaining S3 state bucket
        echo "Checking for remaining S3 state bucket..."
        if aws s3 ls s3://${{ env.TF_STATE_BUCKET }} 2>/dev/null; then
          echo "❌ Found remaining S3 state bucket: [MASKED]"
          exit 1
        else
          echo "✅ No remaining S3 state bucket found"
        fi
        
        echo ""
        echo "🎉 All AWS resources have been successfully cleaned up!"
        echo "✅ No remaining EKS clusters"
        echo "✅ No remaining ECR repositories"
        echo "✅ No remaining VPCs"
        echo "✅ No remaining Load Balancers"
        echo "✅ No remaining Terraform state in S3"
        echo "✅ No remaining S3 state bucket"
