name: Build, Push & Deploy Application

on:
  workflow_dispatch:  # Manual trigger only

env:
  AWS_REGION: eu-central-1
  CLUSTER_NAME: sre-incident-demo-cluster
  APP_NAME: sre-demo-app
  ECR_REPOSITORY: sre-demo-app

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG ./app
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest ./app
        
        echo "Pushing Docker images to ECR..."
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
        
        echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image_latest=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
        
    - name: Deploy application with Helm
      run: |
        # Deploy using Helm with the newly built image
        helm upgrade --install ${{ env.APP_NAME }} ./helm/sre-demo-app \
          --set image.repository=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }} \
          --set image.tag=latest \
          --set image.pullPolicy=Always \
          --namespace default \
          --wait \
          --timeout 5m
          
    - name: Verify deployment
      run: |
        echo "Waiting for pods to be ready..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=${{ env.APP_NAME }} --timeout=300s
        
        echo "Pod status:"
        kubectl get pods -l app.kubernetes.io/name=${{ env.APP_NAME }}
        
        echo "Service status:"
        kubectl get svc ${{ env.APP_NAME }}
        
    - name: Show deployment info
      run: |
        echo "✅ Application built, pushed, and deployed successfully!"
        echo ""
        echo "🐳 Docker Images:"
        echo "- Latest: ${{ steps.build-image.outputs.image_latest }}"
        echo "- Tagged: ${{ steps.build-image.outputs.image }}"
        echo ""
        echo "🌐 Service URL:"
        SERVICE_URL=$(kubectl get svc ${{ env.APP_NAME }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "http://$SERVICE_URL"
        echo ""
        echo "📊 Pod status:"
        kubectl get pods -l app.kubernetes.io/name=${{ env.APP_NAME }}
        echo ""
        echo "🔍 Application health:"
        curl -s http://$SERVICE_URL/health | jq . || echo "Health check not available yet"
        echo ""
        echo "📈 Resource usage:"
        kubectl top pods -l app.kubernetes.io/name=${{ env.APP_NAME }} 2>/dev/null || echo "Metrics server not available"
        
    - name: Show next steps
      run: |
        echo ""
        echo "🎯 Next Steps:"
        echo "1. Test the application: http://$SERVICE_URL"
        echo "2. Run incident demo: ./scripts/incident-demo.sh"
        echo "3. Access Grafana: kubectl port-forward -n monitoring svc/prometheus-grafana 3000:80"
        echo "4. Monitor logs: kubectl logs -l app.kubernetes.io/name=${{ env.APP_NAME }}"
        echo ""
        echo "🔧 Useful Commands:"
        echo "- Scale app: kubectl scale deployment ${{ env.APP_NAME }} --replicas=3"
        echo "- Restart app: kubectl rollout restart deployment ${{ env.APP_NAME }}"
        echo "- Check events: kubectl get events --sort-by='.lastTimestamp'" 