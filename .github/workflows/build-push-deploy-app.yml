name: Build, Push & Deploy Application

on:
  workflow_dispatch:  # Manual trigger only

env:
  AWS_REGION: eu-central-1
  CLUSTER_NAME: sre-incident-demo-cluster
  APP_NAME: sre-demo-app
  ECR_REPOSITORY: sre-demo-app

jobs:
  build-push-deploy:
    runs-on: ubuntu-22.04  # Specific Ubuntu version for stability
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.0  # Pinned version
      with:
        submodules: false
        
    - name: Setup Python 3.11
      uses: actions/setup-python@v4.7.0  # Pinned version
      with:
        python-version: '3.11.9'  # Specific Python version
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip==23.3.2
        pip install awscli==1.32.69 boto3==1.34.69
        
    - name: Setup Node.js 18
      uses: actions/setup-node@v4.1.0  # Pinned version
      with:
        node-version: '18.19.0'  # Specific Node.js version
        
    - name: Install AWS CLI v2
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.15.42.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        aws --version
        
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/v1.28.8/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
        
    - name: Install Helm
      run: |
        curl https://get.helm.sh/helm-v3.13.3-linux-amd64.tar.gz | tar xz
        sudo mv linux-amd64/helm /usr/local/bin/
        helm version
        
    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates=20230311 curl=7.68.0-1ubuntu2.18 gnupg=2.2.19-3ubuntu2.2 lsb-release=11.1.0ubuntu2
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce=5:24.0.7-1~ubuntu.22.04~jammy docker-ce-cli=5:24.0.7-1~ubuntu.22.04~jammy containerd.io=1.6.24-1 docker-buildx-plugin=0.11.2-1~ubuntu.22.04~jammy docker-compose-plugin=2.20.3-1~ubuntu.22.04~jammy
        sudo systemctl start docker
        sudo systemctl enable docker
        docker --version
        
    - name: Install additional tools
      run: |
        sudo apt-get install -y jq=1.6-1ubuntu1 curl=7.68.0-1ubuntu2.18 wget=1.20.3-1ubuntu2 unzip=6.0-25ubuntu1.1 git=1:2.34.1-1ubuntu1.10
        curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs=18.19.0-1nodesource1
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2  # Pinned version
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2.0.0  # Pinned version
      
    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG ./app
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest ./app
        
        echo "Pushing Docker images to ECR..."
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
        
        echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image_latest=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
        
    - name: Deploy application with Helm
      run: |
        # Deploy using Helm with the newly built image
        helm upgrade --install ${{ env.APP_NAME }} ./helm/sre-demo-app \
          --set image.repository=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }} \
          --set image.tag=latest \
          --set image.pullPolicy=Always \
          --namespace default \
          --wait \
          --timeout 5m
          
    - name: Verify deployment
      run: |
        echo "Waiting for pods to be ready..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=${{ env.APP_NAME }} --timeout=300s
        
        echo "Pod status:"
        kubectl get pods -l app.kubernetes.io/name=${{ env.APP_NAME }}
        
        echo "Service status:"
        kubectl get svc ${{ env.APP_NAME }}
        
    - name: Show deployment info
      run: |
        echo "✅ Application built, pushed, and deployed successfully!"
        echo ""
        echo "🐳 Docker Images:"
        echo "- Latest: ${{ steps.build-image.outputs.image_latest }}"
        echo "- Tagged: ${{ steps.build-image.outputs.image }}"
        echo ""
        echo "🌐 Service URL:"
        SERVICE_URL=$(kubectl get svc ${{ env.APP_NAME }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "http://$SERVICE_URL"
        echo ""
        echo "📊 Pod status:"
        kubectl get pods -l app.kubernetes.io/name=${{ env.APP_NAME }}
        echo ""
        echo "🔍 Application health:"
        curl -s http://$SERVICE_URL/health | jq . || echo "Health check not available yet"
        echo ""
        echo "📈 Resource usage:"
        kubectl top pods -l app.kubernetes.io/name=${{ env.APP_NAME }} 2>/dev/null || echo "Metrics server not available"
        
    - name: Show next steps
      run: |
        echo ""
        echo "🎯 Next Steps:"
        echo "1. Test the application: http://$SERVICE_URL"
        echo "2. Run incident demo: ./scripts/incident-demo.sh"
        echo "3. Access Grafana: kubectl port-forward -n monitoring svc/prometheus-grafana 3000:80"
        echo "4. Monitor logs: kubectl logs -l app.kubernetes.io/name=${{ env.APP_NAME }}"
        echo ""
        echo "🔧 Useful Commands:"
        echo "- Scale app: kubectl scale deployment ${{ env.APP_NAME }} --replicas=3"
        echo "- Restart app: kubectl rollout restart deployment ${{ env.APP_NAME }}"
        echo "- Check events: kubectl get events --sort-by='.lastTimestamp'" 